/*
 * This file was generated by guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package com.coralogix.operator.client.model.generated.apiextensions.v1

import io.circe._
import io.circe.syntax._
case class CustomResourceDefinitionSpec(
  conversion: Option[CustomResourceConversion] = None,
  group: String,
  names: CustomResourceDefinitionNames,
  preserveUnknownFields: Option[Boolean] = None,
  scope: String,
  versions: Vector[CustomResourceDefinitionVersion] = Vector.empty
)
object CustomResourceDefinitionSpec {
  implicit val encodeCustomResourceDefinitionSpec
    : Encoder.AsObject[CustomResourceDefinitionSpec] = {
    val readOnlyKeys = Set[String]()
    Encoder.AsObject
      .instance[CustomResourceDefinitionSpec](a =>
        JsonObject.fromIterable(
          Vector(
            ("conversion", a.conversion.asJson),
            ("group", a.group.asJson),
            ("names", a.names.asJson),
            ("preserveUnknownFields", a.preserveUnknownFields.asJson),
            ("scope", a.scope.asJson),
            ("versions", a.versions.asJson)
          )
        )
      )
      .mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeCustomResourceDefinitionSpec: Decoder[CustomResourceDefinitionSpec] =
    new Decoder[CustomResourceDefinitionSpec] {
      final def apply(c: HCursor): Decoder.Result[CustomResourceDefinitionSpec] =
        for {
          v0 <- c.downField("conversion")
                  .as[Option[CustomResourceConversion]]
          v1 <- c.downField("group").as[String]
          v2 <- c.downField("names").as[CustomResourceDefinitionNames]
          v3 <- c.downField("preserveUnknownFields").as[Option[Boolean]]
          v4 <- c.downField("scope").as[String]
          v5 <- c.downField("versions").as[Vector[CustomResourceDefinitionVersion]]
        } yield CustomResourceDefinitionSpec(v0, v1, v2, v3, v4, v5)
    }
}
