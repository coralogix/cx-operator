/*
 * This file was generated by guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package com.coralogix.operator.client.model.generated.apiextensions.v1

import com.coralogix.operator.client.model.generated.Base64String
import io.circe._
import io.circe.syntax._
case class WebhookClientConfig(
  caBundle: Option[Base64String] = None,
  service: Option[ServiceReference] = None,
  url: Option[String] = None
)
object WebhookClientConfig {
  implicit val encodeWebhookClientConfig: Encoder.AsObject[WebhookClientConfig] = {
    val readOnlyKeys = Set[String]()
    Encoder.AsObject
      .instance[WebhookClientConfig](a =>
        JsonObject.fromIterable(
          Vector(
            ("caBundle", a.caBundle.asJson),
            ("service", a.service.asJson),
            ("url", a.url.asJson)
          )
        )
      )
      .mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeWebhookClientConfig: Decoder[WebhookClientConfig] =
    new Decoder[WebhookClientConfig] {
      final def apply(c: HCursor): Decoder.Result[WebhookClientConfig] =
        for {
          v0 <- c.downField("caBundle").as[Option[Base64String]]
          v1 <- c.downField("service").as[Option[ServiceReference]]
          v2 <- c.downField("url").as[Option[String]]
        } yield WebhookClientConfig(v0, v1, v2)
    }
}
