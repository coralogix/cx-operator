/*
 * This file was generated by guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package com.coralogix.operator.client.model.generated.apiextensions.v1

import io.circe._
import io.circe.syntax._
case class ServiceReference(
  name: String,
  namespace: String,
  path: Option[String] = None,
  port: Option[Int] = None
)
object ServiceReference {
  implicit val encodeServiceReference: Encoder.AsObject[ServiceReference] = {
    val readOnlyKeys = Set[String]()
    Encoder.AsObject
      .instance[ServiceReference](a =>
        JsonObject.fromIterable(
          Vector(
            ("name", a.name.asJson),
            ("namespace", a.namespace.asJson),
            ("path", a.path.asJson),
            ("port", a.port.asJson)
          )
        )
      )
      .mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeServiceReference: Decoder[ServiceReference] = new Decoder[ServiceReference] {
    final def apply(c: HCursor): Decoder.Result[ServiceReference] =
      for {
        v0 <- c.downField("name").as[String]
        v1 <- c.downField("namespace").as[String]
        v2 <- c.downField("path").as[Option[String]]
        v3 <- c.downField("port").as[Option[Int]]
      } yield ServiceReference(v0, v1, v2, v3)
  }
}
