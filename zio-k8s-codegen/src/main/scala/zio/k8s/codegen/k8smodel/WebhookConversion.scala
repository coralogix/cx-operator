/*
 * This file was generated by guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package zio.k8s.codegen.k8smodel

import io.circe._
import io.circe.syntax._
case class WebhookConversion(
  clientConfig: Option[WebhookClientConfig] = None,
  conversionReviewVersions: Vector[String] = Vector.empty
)
object WebhookConversion {
  implicit val encodeIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion
    : Encoder.AsObject[WebhookConversion] = {
    val readOnlyKeys = Set[String]()
    Encoder.AsObject
      .instance[WebhookConversion](a =>
        JsonObject.fromIterable(
          Vector(
            ("clientConfig", a.clientConfig.asJson),
            ("conversionReviewVersions", a.conversionReviewVersions.asJson)
          )
        )
      )
      .mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion
    : Decoder[WebhookConversion] = new Decoder[WebhookConversion] {
    final def apply(c: HCursor): Decoder.Result[WebhookConversion] =
      for {
        v0 <- c.downField("clientConfig").as[Option[WebhookClientConfig]]
        v1 <- c.downField("conversionReviewVersions").as[Vector[String]]
      } yield WebhookConversion(v0, v1)
  }
}
