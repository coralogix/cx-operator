/*
 * This file was generated by guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package zio.k8s.codegen.k8smodel

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._

case class WebhookClientConfig(
  caBundle: Option[Base64String] = None,
  service: Option[ServiceReference] = None,
  url: Option[String] = None
)
object WebhookClientConfig {
  implicit val encodeIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig
    : Encoder.AsObject[WebhookClientConfig] = {
    val readOnlyKeys = Set[String]()
    Encoder.AsObject
      .instance[WebhookClientConfig](a =>
        JsonObject.fromIterable(
          Vector(
            ("caBundle", a.caBundle.asJson),
            ("service", a.service.asJson),
            ("url", a.url.asJson)
          )
        )
      )
      .mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig
    : Decoder[WebhookClientConfig] = new Decoder[WebhookClientConfig] {
    final def apply(c: HCursor): Decoder.Result[WebhookClientConfig] =
      for {
        v0 <- c.downField("caBundle").as[Option[Base64String]]
        v1 <- c.downField("service").as[Option[ServiceReference]]
        v2 <- c.downField("url").as[Option[String]]
      } yield WebhookClientConfig(v0, v1, v2)
  }
}
