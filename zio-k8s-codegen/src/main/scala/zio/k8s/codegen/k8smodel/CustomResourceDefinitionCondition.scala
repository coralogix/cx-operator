/*
 * This file was generated by guardrail (https://github.com/twilio/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package zio.k8s.codegen.k8smodel

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._

case class CustomResourceDefinitionCondition(
  lastTransitionTime: Option[java.time.OffsetDateTime] = None,
  message: Option[String] = None,
  reason: Option[String] = None,
  status: String,
  `type`: String
)
object CustomResourceDefinitionCondition {
  implicit val encodeIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition
    : Encoder.AsObject[CustomResourceDefinitionCondition] = {
    val readOnlyKeys = Set[String]()
    Encoder.AsObject
      .instance[CustomResourceDefinitionCondition](a =>
        JsonObject.fromIterable(
          Vector(
            ("lastTransitionTime", a.lastTransitionTime.asJson),
            ("message", a.message.asJson),
            ("reason", a.reason.asJson),
            ("status", a.status.asJson),
            ("type", a.`type`.asJson)
          )
        )
      )
      .mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition
    : Decoder[CustomResourceDefinitionCondition] = new Decoder[CustomResourceDefinitionCondition] {
    final def apply(c: HCursor): Decoder.Result[CustomResourceDefinitionCondition] =
      for {
        v0 <- c.downField("lastTransitionTime").as[Option[java.time.OffsetDateTime]]
        v1 <- c.downField("message").as[Option[String]]
        v2 <- c.downField("reason").as[Option[String]]
        v3 <- c.downField("status").as[String]
        v4 <- c.downField("type").as[String]
      } yield CustomResourceDefinitionCondition(v0, v1, v2, v3, v4)
  }
}
